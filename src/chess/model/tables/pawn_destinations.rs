/// Array of BoardMasks indicating where the white pawns can capture if there are
/// opponent pieces
///
pub const WHITE_PAWN_CONTROL: [u64; 64] = [
  0x0000000000000200,
  0x0000000000000500,
  0x0000000000000A00,
  0x0000000000001400,
  0x0000000000002800,
  0x0000000000005000,
  0x000000000000A000,
  0x0000000000004000,
  0x0000000000020000,
  0x0000000000050000,
  0x00000000000A0000,
  0x0000000000140000,
  0x0000000000280000,
  0x0000000000500000,
  0x0000000000A00000,
  0x0000000000400000,
  0x0000000002000000,
  0x0000000005000000,
  0x000000000A000000,
  0x0000000014000000,
  0x0000000028000000,
  0x0000000050000000,
  0x00000000A0000000,
  0x0000000040000000,
  0x0000000200000000,
  0x0000000500000000,
  0x0000000A00000000,
  0x0000001400000000,
  0x0000002800000000,
  0x0000005000000000,
  0x000000A000000000,
  0x0000004000000000,
  0x0000020000000000,
  0x0000050000000000,
  0x00000A0000000000,
  0x0000140000000000,
  0x0000280000000000,
  0x0000500000000000,
  0x0000A00000000000,
  0x0000400000000000,
  0x0002000000000000,
  0x0005000000000000,
  0x000A000000000000,
  0x0014000000000000,
  0x0028000000000000,
  0x0050000000000000,
  0x00A0000000000000,
  0x0040000000000000,
  0x0200000000000000,
  0x0500000000000000,
  0x0A00000000000000,
  0x1400000000000000,
  0x2800000000000000,
  0x5000000000000000,
  0xA000000000000000,
  0x4000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
];

/// Array of BoardMasks indicating where the black pawns can capture if there are
/// opponent pieces
///
pub const BLACK_PAWN_CONTROL: [u64; 64] = [
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000002,
  0x0000000000000005,
  0x000000000000000A,
  0x0000000000000014,
  0x0000000000000028,
  0x0000000000000050,
  0x00000000000000A0,
  0x0000000000000040,
  0x0000000000000200,
  0x0000000000000500,
  0x0000000000000A00,
  0x0000000000001400,
  0x0000000000002800,
  0x0000000000005000,
  0x000000000000A000,
  0x0000000000004000,
  0x0000000000020000,
  0x0000000000050000,
  0x00000000000A0000,
  0x0000000000140000,
  0x0000000000280000,
  0x0000000000500000,
  0x0000000000A00000,
  0x0000000000400000,
  0x0000000002000000,
  0x0000000005000000,
  0x000000000A000000,
  0x0000000014000000,
  0x0000000028000000,
  0x0000000050000000,
  0x00000000A0000000,
  0x0000000040000000,
  0x0000000200000000,
  0x0000000500000000,
  0x0000000A00000000,
  0x0000001400000000,
  0x0000002800000000,
  0x0000005000000000,
  0x000000A000000000,
  0x0000004000000000,
  0x0000020000000000,
  0x0000050000000000,
  0x00000A0000000000,
  0x0000140000000000,
  0x0000280000000000,
  0x0000500000000000,
  0x0000A00000000000,
  0x0000400000000000,
  0x0002000000000000,
  0x0005000000000000,
  0x000A000000000000,
  0x0014000000000000,
  0x0028000000000000,
  0x0050000000000000,
  0x00A0000000000000,
  0x0040000000000000,
];

/// BoardMasks for each square where a white pawn needs to have no blockers
/// in order to make a single jump
///
pub const WHITE_PAWN_SINGLE_JUMP: [u64; 64] = [
  0x0000000000000100,
  0x0000000000000200,
  0x0000000000000400,
  0x0000000000000800,
  0x0000000000001000,
  0x0000000000002000,
  0x0000000000004000,
  0x0000000000008000,
  0x0000000000010000,
  0x0000000000020000,
  0x0000000000040000,
  0x0000000000080000,
  0x0000000000100000,
  0x0000000000200000,
  0x0000000000400000,
  0x0000000000800000,
  0x0000000001000000,
  0x0000000002000000,
  0x0000000004000000,
  0x0000000008000000,
  0x0000000010000000,
  0x0000000020000000,
  0x0000000040000000,
  0x0000000080000000,
  0x0000000100000000,
  0x0000000200000000,
  0x0000000400000000,
  0x0000000800000000,
  0x0000001000000000,
  0x0000002000000000,
  0x0000004000000000,
  0x0000008000000000,
  0x0000010000000000,
  0x0000020000000000,
  0x0000040000000000,
  0x0000080000000000,
  0x0000100000000000,
  0x0000200000000000,
  0x0000400000000000,
  0x0000800000000000,
  0x0001000000000000,
  0x0002000000000000,
  0x0004000000000000,
  0x0008000000000000,
  0x0010000000000000,
  0x0020000000000000,
  0x0040000000000000,
  0x0080000000000000,
  0x0100000000000000,
  0x0200000000000000,
  0x0400000000000000,
  0x0800000000000000,
  0x1000000000000000,
  0x2000000000000000,
  0x4000000000000000,
  0x8000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
];

/// BoardMasks for each square where a black pawn needs to have no blockers
/// in order to make a single jump
///
pub const BLACK_PAWN_SINGLE_JUMP: [u64; 64] = [
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000001,
  0x0000000000000002,
  0x0000000000000004,
  0x0000000000000008,
  0x0000000000000010,
  0x0000000000000020,
  0x0000000000000040,
  0x0000000000000080,
  0x0000000000000100,
  0x0000000000000200,
  0x0000000000000400,
  0x0000000000000800,
  0x0000000000001000,
  0x0000000000002000,
  0x0000000000004000,
  0x0000000000008000,
  0x0000000000010000,
  0x0000000000020000,
  0x0000000000040000,
  0x0000000000080000,
  0x0000000000100000,
  0x0000000000200000,
  0x0000000000400000,
  0x0000000000800000,
  0x0000000001000000,
  0x0000000002000000,
  0x0000000004000000,
  0x0000000008000000,
  0x0000000010000000,
  0x0000000020000000,
  0x0000000040000000,
  0x0000000080000000,
  0x0000000100000000,
  0x0000000200000000,
  0x0000000400000000,
  0x0000000800000000,
  0x0000001000000000,
  0x0000002000000000,
  0x0000004000000000,
  0x0000008000000000,
  0x0000010000000000,
  0x0000020000000000,
  0x0000040000000000,
  0x0000080000000000,
  0x0000100000000000,
  0x0000200000000000,
  0x0000400000000000,
  0x0000800000000000,
  0x0001000000000000,
  0x0002000000000000,
  0x0004000000000000,
  0x0008000000000000,
  0x0010000000000000,
  0x0020000000000000,
  0x0040000000000000,
  0x0080000000000000,
];

/// BoardMasks for each square where a white pawn needs to have no blockers
/// in order to make a double jump
///
pub const WHITE_PAWN_DOUBLE_JUMP: [u64; 64] = [
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000001010000,
  0x0000000002020000,
  0x0000000004040000,
  0x0000000008080000,
  0x0000000010100000,
  0x0000000020200000,
  0x0000000040400000,
  0x0000000080800000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
];

/// BoardMasks for each square where a black pawn needs to have no blockers
/// in order to make a double jump
///
pub const BLACK_PAWN_DOUBLE_JUMP: [u64; 64] = [
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000010100000000,
  0x0000020200000000,
  0x0000040400000000,
  0x0000080800000000,
  0x0000101000000000,
  0x0000202000000000,
  0x0000404000000000,
  0x0000808000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
  0x0000000000000000,
];

// -----------------------------------------------------------------------------
//  Tests

#[cfg(test)]
mod tests {
  use super::*;
  use crate::model::board::Board;
  use crate::model::board_mask::board_mask_to_string;
  use crate::model::moves::string_to_square;
  use crate::model::piece_moves::get_moves_from_offsets;

  #[ignore]
  #[test]
  fn generate_pawn_control() {
    let mut white_pawn_captures: [u64; 64] = [0; 64];
    let move_offsets: [(isize, isize); 2] = [(1, 1), (-1, 1)];
    for i in 0..64 {
      white_pawn_captures[i] = get_moves_from_offsets(&move_offsets, false, 0, 0, i);
    }
    println!(
      "pub const WHITE_PAWN_CONTROL:[u64; 64] = {:#018X?};",
      white_pawn_captures
    );

    let mut black_pawn_captures: [u64; 64] = [0; 64];
    let move_offsets: [(isize, isize); 2] = [(1, -1), (-1, -1)];
    for i in 0..64 {
      black_pawn_captures[i] = get_moves_from_offsets(&move_offsets, false, 0, 0, i);
    }
    println!(
      "pub const BLACK_PAWN_CONTROL:[u64; 64] = {:#018X?};",
      black_pawn_captures
    );
  }

  #[ignore]
  #[test]
  fn generate_white_pawn_single_jumps() {
    let mut white_pawn_single_jumps: [u64; 64] = [0; 64];
    let move_offsets: [(isize, isize); 1] = [(0, 1)];
    for i in 0..64 {
      white_pawn_single_jumps[i] = get_moves_from_offsets(&move_offsets, false, 0, 0, i);
    }
    println!(
      "pub const WHITE_PAWN_SINGLE_JUMP:[u64; 64] = {:#018X?};",
      white_pawn_single_jumps
    );

    let mut black_pawn_single_jumps: [u64; 64] = [0; 64];
    let move_offsets: [(isize, isize); 1] = [(0, -1)];
    for i in 0..64 {
      black_pawn_single_jumps[i] = get_moves_from_offsets(&move_offsets, false, 0, 0, i);
    }
    println!(
      "pub const BLACK_PAWN_SINGLE_JUMP:[u64; 64] = {:#018X?};",
      black_pawn_single_jumps
    );
  }

  #[ignore]
  #[test]
  fn generate_white_pawn_double_jumps() {
    let mut white_pawn_double_jumps: [u64; 64] = [0; 64];
    let move_offsets: [(isize, isize); 2] = [(0, 1), (0, 2)];
    for i in 0..64 {
      let (_, rank) = Board::index_to_fr(i);
      if rank == 2 {
        white_pawn_double_jumps[i] = get_moves_from_offsets(&move_offsets, false, 0, 0, i);
      } else {
        white_pawn_double_jumps[i] = 0;
      }
    }
    println!(
      "pub const WHITE_PAWN_DOUBLE_JUMP:[u64; 64] = {:#018X?};",
      white_pawn_double_jumps
    );

    let mut black_pawn_double_jumps: [u64; 64] = [0; 64];
    let move_offsets: [(isize, isize); 2] = [(0, -1), (0, -2)];
    for i in 0..64 {
      let (_, rank) = Board::index_to_fr(i);
      if rank == 7 {
        black_pawn_double_jumps[i] = get_moves_from_offsets(&move_offsets, false, 0, 0, i);
      } else {
        black_pawn_double_jumps[i] = 0;
      }
    }
    println!(
      "pub const BLACK_PAWN_DOUBLE_JUMP:[u64; 64] = {:#018X?};",
      black_pawn_double_jumps
    );
  }
}
