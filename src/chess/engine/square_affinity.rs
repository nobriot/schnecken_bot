/// Tables of squares that are good for each pieces in each game phase.
pub struct OpeningSquareTable;

impl OpeningSquareTable {
  pub const WHITE_KING: [f32; 64] = [
    2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0, // 1st row
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 2nd row
    -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, // 3rd row.
    -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0, // 4th row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 5th row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 6th row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 7th row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 8th row
  ];
  pub const BLACK_KING: [f32; 64] = [
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 1st row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 2nd row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 3rd row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 4th row
    -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0, // 5th row
    -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, // 6th row
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, //7th row
    2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0, // 8th row
  ];
  pub const WHITE_QUEEN: [f32; 64] = [
    -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0, // 1st row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 2nd row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 3rd row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 4th row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 5th row.
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 6th row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, //7th row
    -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0, // 8th row
  ];
  pub const BLACK_QUEEN: [f32; 64] = [
    -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0, // 1st row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 2nd row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 3rd row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 4th row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 5th row.
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 6th row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, //7th row
    -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0, // 8th row
  ];
  pub const WHITE_ROOK: [f32; 64] = [
    0.0, 0.0, 0.2, 0.5, 0.5, 0.2, 0.0, 0.0, // 1st row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 2nd row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 3rd row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 4th row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 5th row.
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 6th row
    0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, //7th row, me likey!
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 8th row
  ];
  pub const BLACK_ROOK: [f32; 64] = [
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 1st row
    0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, // 2nd row, me likey!
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 3rd row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 4th row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 5th row.
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 6th row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, //7th row
    0.0, 0.0, 0.2, 0.5, 0.5, 0.2, 0.0, 0.0, // 8th row
  ];
  pub const WHITE_BISHOP: [f32; 64] = [
    -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0, // 1st row
    -1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0, // 2nd row
    -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, // 3rd row
    -1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, // 4th row
    -1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0, // 5th row.
    -1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0, // 6th row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 7th row
    -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0, // 8th row
  ];
  pub const BLACK_BISHOP: [f32; 64] = [
    -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0, // 1st row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 2nd row
    -1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0, // 3rd row
    -1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0, // 4th row
    -1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, // 5th row.
    -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, // 6th row
    -1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0, // 7th row
    -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0, // 8th row
  ];
  pub const WHITE_KNIGHT: [f32; 64] = [
    -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0, // 1st row
    -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0, // 2nd row
    -3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0, // 3rd row
    -3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0, // 4th row
    -3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0, // 5th row.
    -3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0, // 6th row
    -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0, // 7th row
    -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0, // 8th row
  ];
  pub const BLACK_KNIGHT: [f32; 64] = [
    -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0, // 1st row
    -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0, // 2nd row
    -3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0, // 3rd row
    -3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0, // 4th row
    -3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0, // 5th row.
    -3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0, // 6th row
    -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0, // 7th row
    -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0, // 8th row
  ];
  pub const WHITE_PAWN: [f32; 64] = [
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 1st row
    0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5, // 2nd row
    0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5, // 3rd row
    0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, // 4th row
    0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5, // 5th row.
    1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0, // 6th row
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, // 7th row
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 8th row
  ];

  pub const BLACK_PAWN: [f32; 64] = [
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 1st row
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, // 2nd row
    1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0, // 3rd row
    0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5, // 4th row
    0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, // 5th row.
    0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5, // 6th row
    0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5, // 7th row
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 8th row
  ];
}

pub struct MiddleGameSquareTable;

impl MiddleGameSquareTable {
  pub const WHITE_KING: [f32; 64] = [
    2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0, // 1st row
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 2nd row
    -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, // 3rd row.
    -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0, // 4th row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 5th row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 6th row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 7th row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 8th row
  ];
  pub const BLACK_KING: [f32; 64] = [
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 1st row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 2nd row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 3rd row
    -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0, // 4th row
    -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0, // 5th row
    -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, // 6th row
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, //7th row
    2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0, // 8th row
  ];
  pub const WHITE_QUEEN: [f32; 64] = [
    -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0, // 1st row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 2nd row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 3rd row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 4th row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 5th row.
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 6th row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, //7th row
    -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0, // 8th row
  ];
  pub const BLACK_QUEEN: [f32; 64] = [
    -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0, // 1st row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 2nd row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 3rd row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 4th row
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 5th row.
    -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0, // 6th row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, //7th row
    -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0, // 8th row
  ];
  pub const WHITE_ROOK: [f32; 64] = [
    0.0, 0.0, 0.2, 0.5, 0.5, 0.2, 0.0, 0.0, // 1st row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 2nd row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 3rd row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 4th row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 5th row.
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 6th row
    0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, //7th row, me likey!
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 8th row
  ];
  pub const BLACK_ROOK: [f32; 64] = [
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 1st row
    0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, // 2nd row, me likey!
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 3rd row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 4th row
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 5th row.
    -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, // 6th row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, //7th row
    0.0, 0.0, 0.2, 0.5, 0.5, 0.2, 0.0, 0.0, // 8th row
  ];
  pub const WHITE_BISHOP: [f32; 64] = [
    -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0, // 1st row
    -1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0, // 2nd row
    -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, // 3rd row
    -1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, // 4th row
    -1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0, // 5th row.
    -1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0, // 6th row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 7th row
    -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0, // 8th row
  ];
  pub const BLACK_BISHOP: [f32; 64] = [
    -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0, // 1st row
    -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, // 2nd row
    -1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0, // 3rd row
    -1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0, // 4th row
    -1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, // 5th row.
    -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, // 6th row
    -1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0, // 7th row
    -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0, // 8th row
  ];
  pub const WHITE_KNIGHT: [f32; 64] = [
    -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0, // 1st row
    -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0, // 2nd row
    -3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0, // 3rd row
    -3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0, // 4th row
    -3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0, // 5th row.
    -3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0, // 6th row
    -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0, // 7th row
    -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0, // 8th row
  ];
  pub const BLACK_KNIGHT: [f32; 64] = [
    -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0, // 1st row
    -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0, // 2nd row
    -3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0, // 3rd row
    -3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0, // 4th row
    -3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0, // 5th row.
    -3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0, // 6th row
    -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0, // 7th row
    -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0, // 8th row
  ];
  pub const WHITE_PAWN: [f32; 64] = [
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 1st row
    0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5, // 2nd row
    0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5, // 3rd row
    0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, // 4th row
    0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5, // 5th row.
    1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0, // 6th row
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, // 7th row
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 8th row
  ];

  pub const BLACK_PAWN: [f32; 64] = [
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 1st row
    5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, // 2nd row
    1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0, // 3rd row
    0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5, // 4th row
    0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, // 5th row.
    0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5, // 6th row
    0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5, // 7th row
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // 8th row
  ];
}

//------------------------------------------------------------------------------
// Tests
#[cfg(test)]
mod tests {
  use super::*;
  use crate::model::{board_mask::*, moves::string_to_square};

  #[test]
  fn check_opening_knight_values() {
    assert_eq!(
      OpeningSquareTable::WHITE_KNIGHT[string_to_square("e4") as usize],
      2.0
    );
    assert_eq!(
      OpeningSquareTable::WHITE_KNIGHT[string_to_square("d4") as usize],
      2.0
    );
    assert_eq!(
      OpeningSquareTable::WHITE_KNIGHT[string_to_square("f3") as usize],
      1.0
    );
    assert_eq!(
      OpeningSquareTable::WHITE_KNIGHT[string_to_square("h3") as usize],
      -3.0
    );
  }

  #[test]
  fn check_opening_white_pawn_values() {
    assert_eq!(
      OpeningSquareTable::WHITE_PAWN[string_to_square("e2") as usize],
      -2.0
    );
    assert_eq!(
      OpeningSquareTable::WHITE_PAWN[string_to_square("e4") as usize],
      2.0
    );
    assert_eq!(
      OpeningSquareTable::WHITE_PAWN[string_to_square("h4") as usize],
      0.0
    );
  }
}
